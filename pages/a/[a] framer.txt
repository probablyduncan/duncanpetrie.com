import { getArticle, getArticleIDs } from "@/lib/dataParser";
import { createContext, createRef, useContext, useEffect, useMemo, useRef, useState } from "react";
import { getMDXComponent } from "mdx-bundler/client"
import { Img, imgData, getSrc, getCaption } from "@/data/images";
import { ViewportContext } from "@/components/Viewport";
import Layout from "@/components/Layout";
import style from "@/components/article.module.css";
import Head from "next/head";
import { Lato } from "@next/font/google";
import { Paragraph, Title, Dept, Caption, UnderLonk, Subtitle } from "@/components/TextStyles";
import { clamp, motion, useInView, useMotionValue, useMotionValueEvent, useScroll, useSpring, useTransform } from "framer-motion";

const lato = Lato({ subsets: ['latin'], display: 'swap', weight: '700', variable: true});

export async function getStaticPaths() {
    const paths = await getArticleIDs();
    return {
        paths,
        fallback: false
    };
}

export async function getStaticProps( {params} ) {
    const article = await getArticle(params.a);
    const otherArticles = [];
    return {
        props: {
            article,
            otherArticles
        }
    };
}

const ArticleContext = createContext();

export default function ArticleLayout({ article }) {
    
    const Content = useMemo(() => getMDXComponent(article.code, {Breakpoint: Breakpoint, MobileImage: MobileImage}), [article.code]);
    const {mobile} = useContext(ViewportContext);

    // replace strings with image objects in image groups
    const imageGroups = article.frontmatter.imageGroups.map(i => {
        // make sure this only runs once
        if (i.images.constructor !== Array) i.images = processImageGroupImages(i.images);
        return i;
    });

    // process article colors
    const colors = article.frontmatter.colors ? [article.frontmatter.colors[0], article.frontmatter.colors[1] ?? article.frontmatter.colors[0]] : ['cornflowerblue', 'cornflowerblue'];
    

    // https://stackoverflow.com/questions/54633690/how-can-i-use-multiple-refs-for-an-array-of-elements-with-hooks/56063129#56063129
    // here we make an array of refs in state so we can reference each breakpoint (2nd answer in post ^ above)

    const [breakpointRefs, setBreakpointRefs] = useState([]);
    useEffect(() => {
        if (mobile) return;

        setBreakpointRefs((elRefs) =>
            Array(imageGroups.length)
            .fill()
            .map((_, i) => breakpointRefs[i] || createRef()),
        );
        
    }, [imageGroups.length, mobile]);
    

    return (<>
        <Head>
            {/* {imageGroups.map(g => {
                return g.images.map(i => {
                    return <link key={getSrc(i)} rel="preload" as="image" href={getSrc(i)} />
                });
            })} */}
        </Head>
        <Layout color={colors[1]} pagename={article.a} >
            <ArticleContext.Provider value={{imageGroups, breakpointRefs}}>
                <div className={style.articleWrapper} style={{ margin: mobile ? '0 20px ' : '120px 0 0 0', fontSize: '18px', paddingTop: mobile ? '25px' : 'inherit' }}>
                    {!mobile && <div className={style.articleImageColumn} >
                        {imageGroups.map((g, i) => {
                            return <OffsetGroup group={i} key={`ImageGroup-${i}`} />
                        })}
                    </div>}
                    <div className={style.articleTextColumn} style={{ margin: mobile ? '0' : '20vh 60px 20vh 0'}}>
                        <MobileImage group={0} index={0} />
                        <Dept color={colors[0]}>
                            {article.frontmatter.dept.toUpperCase()}
                        </Dept>
                        <Title>
                            {article.frontmatter.title}
                        </Title>
                        <article>
                            <Content components={{h1: Title, h2: Subtitle, h3: Dept, h4: Caption, p: Paragraph, a: UnderLonk}} />
                        </article>
                        <Caption>
                            {'location' in article.frontmatter && <><br />{article.frontmatter.location}.</>}
                            {'date' in article.frontmatter && <><br />{article.frontmatter.date}.</>}
                        </Caption>
                    </div>
                </div>
            </ArticleContext.Provider>
        </Layout>
    </>);
}

function Breakpoint({ group, index, noMobile, children }) {
    
    const {imageGroups, breakpointRefs} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    const firstGroupOffset = group == 0 ? '3000px' : 0;

    return (mobile ? <>
        {!noMobile && <ArticleImage image={index ? imgData[index] : imageGroups[group].images[0]} />}
        {children}
        {!noMobile && <ArticleImage image={index ? imgData[index + 1] : imageGroups[group].images[1]} />}
    </> : 
        <div ref={breakpointRefs[group]} style={{
            border: '2px solid black',
            marginTop: `-${firstGroupOffset}`,
            paddingTop: `${firstGroupOffset}`
        }}>{children}</div>
    );
}

function MobileImage({ group = 0, index = 1 }) {

    const {imageGroups} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile && <ArticleImage image={imageGroups[group].images[index]} />);
}

function OffsetGroup({ group }) {
    const {imageGroups, breakpointRefs} = useContext(ArticleContext);

    const offsetGroupRef = useRef()

    const [thisHeight, setThisHeight] = useState(0);
    const [breakpointHeight, setBreakpointHeight] = useState(0);
    
    useEffect(() => {

        if (breakpointRefs[group]) {
            setThisHeight(offsetGroupRef.current.firstChild.firstChild.clientHeight);
            setBreakpointHeight(breakpointRefs[group].current.clientHeight ?? 0);
        }

    }, [breakpointRefs, group])

    
    const { scrollYProgress } = useScroll({
        target: breakpointRefs[group],
        offset: [`start end`, `end start`],
        layoutEffect: false
    });

    const y = useTransform(
        scrollYProgress,
        value => (breakpointHeight > thisHeight ? value * (breakpointHeight - thisHeight) : 0)
    )
    const ySpring = useSpring(y);

    return (<motion.div ref={offsetGroupRef} style={{
        zIndex: '20',
        position: 'absolute',
        maxWidth: '50%',
        top: breakpointRefs[group]?.current?.offsetTop ?? 0 - thisHeight,
        y
    }}>
        <ArticleImage image={imageGroups[group].images[0]} />
    </motion.div>);
}

// gets passed an image object and creates an image
function ArticleImage({ image }) {
    return image && <div className={style.articleImageBlock}>
        <Img img={image} />
        <Caption>{getCaption(image)}</Caption>
    </div>
}

function processImageGroupImages(images) {
    return images.split(',').map(key => {
        if (key.trim() in imgData) return imgData[key.trim()];
    });
}