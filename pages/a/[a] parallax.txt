import { getArticle, getArticleIDs } from "@/lib/dataParser";
import { createContext, createRef, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
import { getMDXComponent } from "mdx-bundler/client"
import { Img, imgData, getSrc, getCaption } from "@/data/images";
import { ViewportContext } from "@/components/Viewport";
import Layout from "@/components/Layout";
import style from "@/components/article.module.css";
import Head from "next/head";
import { Lato } from "@next/font/google";
import { Paragraph, Title, Dept, Caption, UnderLonk, Subtitle } from "@/components/TextStyles";
import { clamp, motion, useInView, useMotionValue, useMotionValueEvent, useScroll, useSpring, useTransform } from "framer-motion";

const lato = Lato({ subsets: ['latin'], display: 'swap', weight: '700', variable: true});

export async function getStaticPaths() {
    const paths = await getArticleIDs();
    return {
        paths,
        fallback: false
    };
}

export async function getStaticProps( {params} ) {
    const article = await getArticle(params.a);
    const otherArticles = [];
    return {
        props: {
            article,
            otherArticles
        }
    };
}

const ArticleContext = createContext();

export default function ArticleLayout({ article }) {
    
    const Content = useMemo(() => getMDXComponent(article.code, {Enter: Enter, Exit: Exit, Extra: Extra}), [article.code]);
    const {mobile} = useContext(ViewportContext);

    // replace strings with image objects in image groups
    const imageGroups = article.frontmatter.imageGroups.map(i => {
        // make sure this only runs once
        if (i.images.constructor !== Array) i.images = processImageGroupImages(i.images);
        return i;
    });

    // process article colors
    const colors = article.frontmatter.colors ? [article.frontmatter.colors[0], article.frontmatter.colors[1] ?? article.frontmatter.colors[0]] : ['cornflowerblue', 'cornflowerblue'];
    

    // https://stackoverflow.com/questions/54633690/how-can-i-use-multiple-refs-for-an-array-of-elements-with-hooks/56063129#56063129
    // here we make an array of refs in state so we can reference each breakpoint (2nd answer in post ^ above)

    const [enterRefs, setEnterRefs] = useState([]);
    const [exitRefs, setExitRefs] = useState([]);
    useEffect(() => {
        if (mobile) return;

        setEnterRefs((elRefs) => 
            Array(imageGroups.length)
            .fill()
            .map((_, i) => enterRefs[i] ?? createRef() )
        );
        
        setExitRefs((elRefs) => 
            Array(imageGroups.length)
            .fill()
            .map((_, i) => exitRefs[i] ?? createRef() )
        );
        
    }, [imageGroups.length, mobile]);
    
    // this is the distance between the top of the window and the start of the article
    const topOffset = 120;

    return (<>
        <Head>
            {/* {imageGroups.map(g => {
                return g.images.map(i => {
                    return <link key={getSrc(i)} rel="preload" as="image" href={getSrc(i)} />
                });
            })} */}
        </Head>
        <Layout color={colors[1]} pagename={article.a} >
            <ArticleContext.Provider value={{imageGroups, enterRefs, exitRefs, topOffset}}>
                <div className={style.articleWrapper} style={{ margin: mobile ? '0 20px ' : `0`, fontSize: '18px', paddingTop: mobile ? '25px' : 'inherit' }}>
                    {!mobile && <div className={style.articleImageColumn} >
                        {imageGroups.map((g, i) => {
                            return <OffsetGroup group={i} key={`ImageGroup-${i}`} />
                        })}
                    </div>}
                    <div className={style.articleTextColumn} style={{ margin: mobile ? '0' : '0 60px 20vh 0'}}>
                        <Enter margin={`0 0 calc(20vh + ${topOffset}px) 0`} />
                        <Dept color={colors[0]}>
                            {article.frontmatter.dept.toUpperCase()}
                        </Dept>
                        <Title>
                            {article.frontmatter.title}
                        </Title>
                        <article>
                            <Content components={{h1: Title, h2: Subtitle, h3: Dept, h4: Caption, p: Paragraph, a: UnderLonk}} />
                        </article>
                        <Caption>
                            {'location' in article.frontmatter && <><br />{article.frontmatter.location}.</>}
                            {'date' in article.frontmatter && <><br />{article.frontmatter.date}.</>}
                        </Caption>
                    </div>
                </div>
            </ArticleContext.Provider>
        </Layout>
    </>);
}

function Enter({ group = 0, index = 0, noMobile, margin }) {
    const {imageGroups, enterRefs} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile ? 
        // if mobile and the index is valid, render an article image
        (!noMobile && imageGroups[group].images.length > index && <ArticleImage image={imageGroups[group].images[index]} />)
    :
        // if not mobile, return a ref div
        <div ref={enterRefs[group]} style={{border: '0px solid cornflowerblue', margin: margin ?? 0}}></div>
    );
}

function Exit({ group = 0, index = 1, noMobile, margin }) {
    const {imageGroups, exitRefs} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile ? 
        // if mobile and the index is valid, render an article image
        (!noMobile && imageGroups[group].images.length > index && <ArticleImage image={imageGroups[group].images[index]} />)
    :
        // if not mobile, return a ref div
        <div ref={exitRefs[group]} style={{border: '0px solid coral', margin: margin ?? 0}}></div>
    );
}

function Extra({ group = 0, index = 2 }) {
    const {imageGroups} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile && imageGroups[group].images.length > index && 
        <ArticleImage image={imageGroups[group].images[index]} />
    );
}

function OffsetGroup({ group }) {
    const {imageGroups, enterRefs, exitRefs, topOffset} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    const offsetGroupRef = useRef();

    //#region set layout variables

    const [layout, setlayout] = useState({ enterOffset: 0, exitOffset: 0, windowHeight: 0, thisHeight: 0, staticGroup: true });

    const initLayout = () => {

        let enterOffset = enterRefs[group]?.current?.offsetTop ?? 0;
        let exitOffset = exitRefs[group]?.current?.offsetTop ?? enterOffset;

        if ( enterOffset == exitOffset) {
            
            enterOffset -= group > 0 ? window.innerHeight : enterOffset;
            exitOffset += group > 0 ? window.innerHeight : window.innerHeight * 2;
        }

        const { height: thisHeight } = offsetGroupRef.current.getBoundingClientRect();

        setlayout({
            enterOffset,
            exitOffset,
            windowHeight: window.innerHeight,
            thisHeight,
        });
    }

    useLayoutEffect(initLayout,[enterRefs, exitRefs, group, mobile]);

    //#endregion

    const { scrollY } = useScroll();

    const y = useTransform(
        scrollY,
        [
            (group == 0 ? (topOffset * -2) : layout.enterOffset - layout.windowHeight), 
            layout.exitOffset
        ],
        [0, Math.abs(layout.exitOffset - layout.enterOffset - layout.thisHeight + 40)],
    );

    return (<motion.div ref={offsetGroupRef} layout style={{
        zIndex: '50',
        position: 'absolute',
        maxWidth: '50%',
        top: layout.enterOffset,
        y,
        // opacity,
    }}>
        <ArticleImage image={imageGroups[group].images[0]} />
    </motion.div>);
}

// gets passed an image object and creates an image
function ArticleImage({ image }) {
    return image && <div className={style.articleImageBlock}>
        <Img img={image} />
        <Caption>{getCaption(image)}</Caption>
    </div>
}

function processImageGroupImages(images) {
    return images.split(',').map(key => {
        if (key.trim() in imgData) return imgData[key.trim()];
    });
}