import { getArticle, getArticleIDs } from "@/lib/dataParser";
import { createContext, useContext, useEffect, useMemo, useRef, useState } from "react";
import { getMDXComponent } from "mdx-bundler/client"
import { Img, imgData, getSrc, getCaption } from "@/data/images";
import { ViewportContext } from "@/components/Viewport";
import Layout from "@/components/Layout";
import style from "@/components/article.module.css";
import Head from "next/head";
import { Lato } from "@next/font/google";
import { Paragraph, Title, Dept, Caption, UnderLonk, Subtitle } from "@/components/TextStyles";

const lato = Lato({ subsets: ['latin'], display: 'swap', weight: '700', variable: true});

export async function getStaticPaths() {
    const paths = await getArticleIDs();
    return {
        paths,
        fallback: false
    };
}

export async function getStaticProps( {params} ) {
    const article = await getArticle(params.a);
    const otherArticles = [];
    return {
        props: {
            article,
            otherArticles
        }
    };
}

const ArticleContext = createContext();

export default function ArticleLayout({ article }) {
    
    const Content = useMemo(() => getMDXComponent(article.code, {Breakpoint: Breakpoint, Extra: Extra, UnderLonk: UnderLonk}), [article.code]);
    const {mobile} = useContext(ViewportContext);

    const [currentGroupIndex, setCurrentGroupIndex] = useState(0);

    // replace strings with image objects in image groups
    const imageGroups = article.frontmatter.imageGroups.map(i => {
        // make sure this only runs once
        if (i.images.constructor !== Array) i.images = processImageGroupImages(i.images);
        return i;
    });

    const colors = article.frontmatter.colors ? [article.frontmatter.colors[0], article.frontmatter.colors[1] ?? article.frontmatter.colors[0]] : ['cornflowerblue', 'cornflowerblue'];
    
    // https://stackoverflow.com/questions/54633690/how-can-i-use-multiple-refs-for-an-array-of-elements-with-hooks/56063129#56063129
    // here we make an array of refs so we can reference each breakpoint
    const breakpointsRef = useRef([]);
    const [imgFade, setImgFade] = useState({});

    useEffect(() => {
        if (mobile) return;
        
        breakpointsRef.current = breakpointsRef.current.slice(0, imageGroups.length);

        const onScroll = () => {

            let group = 0;
            breakpointsRef.current.forEach((e, i) => {

                // if the breakpoint is in/above the top 60% of the page, it is active
                if (e && window.innerHeight * 0.6 + window.scrollY < e.offsetTop) return;

                // otherwise move on to the next
                group = i;
            })

            if (group != currentGroupIndex) {
                setImgFade({opacity: '0'});
                setTimeout(() => {
                    setCurrentGroupIndex(group);
                    setImgFade({opacity: '1'});
                }, 200);
            };
        }

        // calling this once on load seems to cause problems
        // onScroll();

        window.addEventListener('scroll', onScroll);
        return () => {
            window.removeEventListener('scroll', onScroll);
        }

    }, [imageGroups, currentGroupIndex, mobile]);
    
    return (<>
        <Head>
            {imageGroups.map(g => {
                return g.images.map(i => {
                    return <link key={getSrc(i)} rel="preload" as="image" href={getSrc(i)} />
                });
            })}
        </Head>
        <Layout color={colors[1]} pagename={article.a} >
            <ArticleContext.Provider value={{currentGroupIndex, setCurrentGroupIndex, imageGroups, breakpointsRef}}>
                <div className={style.articleWrapper} style={{ margin: mobile ? '0 20px ' : '120px 0 0 0', fontSize: '18px', paddingTop: mobile ? '25px' : 'inherit' }}>
                    {!mobile && <div className={style.articleImageColumn} style={imgFade}>
                        <ImageSideview group={imageGroups[currentGroupIndex]} color={colors[0]} />
                    </div>}
                    <div className={style.articleTextColumn} style={{ margin: mobile ? '0' : '20vh 60px 20vh 0'}}>
                        <Breakpoint group={0} />
                        <Dept color={colors[0]}>
                            {article.frontmatter.dept.toUpperCase()}
                        </Dept>
                        <Title>
                            {article.frontmatter.title}
                        </Title>
                        <article>
                            <Content components={{h1: Title, h2: Subtitle, h3: Dept, h4: Caption, p: Paragraph, a: UnderLonk}} />
                        </article>
                        <Caption>
                            {'location' in article.frontmatter && <><br />{article.frontmatter.location}.</>}
                            {'date' in article.frontmatter && <><br />{article.frontmatter.date}.</>}
                        </Caption>
                    </div>
                </div>
            </ArticleContext.Provider>
        </Layout>
    </>);
}

function Breakpoint({ group }) {
    
    const {imageGroups, breakpointsRef} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile ? <ArticleImage image={imageGroups[group].images[0]} /> : <div ref={e => breakpointsRef.current[group] = e}>
        {/* {group > 0 && <p style={{textAlign: 'center'}}>&mdash;&nbsp;&ndash;&nbsp;&mdash;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>} */}
    </div>);
}

// i: image index in group's images
function Extra({ group = 0, index = 1 }) {

    const {imageGroups} = useContext(ArticleContext);
    const {mobile} = useContext(ViewportContext);

    return (mobile && <ArticleImage image={imageGroups[group].images[index]} />);
}

// gets passed an image object and creates an image
function ArticleImage({ image }) {
    return image && <div className={style.articleImageBlock}>
        <Img img={image} />
        <Caption>{getCaption(image)}</Caption>
    </div>
}

// group: object which holds group data
function ImageSideview({ group, color }) {

    const [currentSlide, setCurrentSlide] = useState(0);
    const arrowLeft = useRef();
    const arrowRight = useRef();

    useEffect(() => {
        const keyDownHandler = (e) => {
            
            if (group.type == 's') {
                if (e.code === "ArrowLeft") {
                    setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : group.images.length - 1);
                    stylePress(arrowLeft.current);
                }
    
                if (e.code === "ArrowRight") {
                    setCurrentSlide(currentSlide < group.images.length - 1 ? currentSlide + 1 : 0);
                    stylePress(arrowRight.current);
                }
            }
        };

        // flash hover effect on keypress
        const stylePress = (e) => {
            if (group.type == 's' && e) {
                e.classList.add(style.press);
                setTimeout(() => {
                    e.classList.remove(style.press);
                }, 200);
            }
        };

        if (group.type == 's')
            document.addEventListener("keydown", keyDownHandler);

        return () => 
            document.removeEventListener("keydown", keyDownHandler);

    }, [currentSlide, group.images.length, group.type]);
    
    const Dir = ({ children }) => <i>{children}:&nbsp;&nbsp;</i>;

    return (<>{group.type == 'p' || group.type == 'b' ? (

        // two images together, either p or b
        <div className={style.imageContainer} style={group.type == 'b' ? {flexDirection: 'column-reverse', justifyContent: 'flex-end'} : {}}>
            <Img img={group.images[0]} />
            <div style={group.type == 'b' ? {marginBottom: '25px'} : {marginTop: '25px'}}>
                <Img img={group.images[1]} className={style.smallImg} />
                <div style={group.type == 'b' ? {display: 'flex', flexDirection: 'column-reverse'} : {}}>
                    <Caption textAlign='left'>
                        <Dir>{group.type == 'b' ? 'Below' : 'Above'}</Dir>
                        {getCaption(group.images[0])}
                    </Caption>
                    <Caption textAlign='left'>
                        <Dir>Left</Dir>
                        {getCaption(group.images[1])}
                    </Caption>
                </div>
            </div>
        </div>

    ) : (

        // slideshow or single image
        <div className={style.imageContainer} style={{ maxWidth: `calc((100vh - 240px) * ${group.images[group.type == 's' ? currentSlide ?? 0 : 0].ratio ?? 100})`, float: 'right' }}>
            <Img img={group.images[group.type == 's' ? currentSlide ?? 0 : 0]} />
            <div style={{width: '100%', display: 'flex', justifyContent: 'space-between', flexDirection: 'row-reverse', alignItems: 'baseline'}}>
                <Caption>
                    {getCaption(group.images[group.type == 's' ? currentSlide ?? 0 : 0])}
                </Caption>
                { group.type == 's' && <div className={style.slideshowArrows + " " + lato.className}>
                    <button ref={arrowLeft} onClick={() => setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : group.images.length - 1)}>
                        &lt;
                    </button>
                    <span style={{color: color}}>
                        {currentSlide + 1 + "/" + group.images.length}
                    </span>
                    <button ref={arrowRight} onClick={() => setCurrentSlide(currentSlide < group.images.length - 1 ? currentSlide + 1 : 0)}
                        >&gt;
                    </button>
                </div>}
            </div>
        </div>

    )}</>);
}

function processImageGroupImages(images) {
    return images.split(',').map(key => {
        if (key.trim() in imgData) return imgData[key.trim()];
    });
}